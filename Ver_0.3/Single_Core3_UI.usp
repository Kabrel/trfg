/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Core3 Panel Logic"
#HINT "Core3 Panel Logic"
#DEFINE_CONSTANT MAINPAGES 8
#DEFINE_CONSTANT ZONES 8
#DEFINE_CONSTANT SOURCES 7
#DEFINE_CONSTANT PULTS 2
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
//DIGITAL_INPUT ControlButton, _SKIP_;
ANALOG_INPUT IconList[PULTS], _SKIP_;

ANALOG_INPUT InputSource[ZONES]; 
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT ShowMainPage[MAINPAGES], _SKIP_;
DIGITAL_OUTPUT ShowSourcePage[SOURCES], _SKIP_;
ANALOG_OUTPUT Core3MediaPlayerSource, _SKIP_;
ANALOG_OUTPUT CorVideoOut[ZONES], _SKIP_;
ANALOG_OUTPUT CorAudioOut[ZONES];
//STRING_OUTPUT Debug;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER CurSPage, CurPage, CurSource[ZONES];
INTEGER RelArray[ZONES][SOURCES];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE IconList 
{
	INTEGER a;

	a = GetLastModifiedArrayIndex();
	Pulse(10, ShowMainPage[IconList[a]]);
	
	//CurSPage = IconList[a];
}

CHANGE InputSource
{
	INTEGER i;
	
	i = GetLastModifiedArrayIndex();
	
	CurPage = i;
	
	SWITCH (i)		
	{			
    	CASE (1): //Living Room - Zone 01
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 3)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 4) //Sonos
			{
				Pulse(10, ShowSourcePage[4]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 5) //Light
			{
				Pulse(10, ShowSourcePage[5]);				
			}
			else if (InputSource[i] = 6) //Climat
			{
				Pulse(10, ShowSourcePage[6]); 				
			}
			else if (InputSource[i] = 7) //Blinds
			{
				Pulse(10, ShowSourcePage[7]);				
			}
			else if	(InputSource[i] = 0) //RoomOff 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
				CorVideoOut[i] = 0;
			}
		}           								
		CASE (2): //Dinning Room - Zone 02
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 2)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 3) //Sonos
			{
				Pulse(10, ShowSourcePage[4]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 14)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 2;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 15)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 3;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
				CorVideoOut[i] = 0;
			}
		}           								
		CASE (3): //Master Bedroom - Zone 03
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 12)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 13)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 14)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 2;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 15)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 3;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
				CorVideoOut[i] = 0;
			}           								           								               													
		}
		CASE (4): //Master Bathroom - Zone 04
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 12)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 13)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 14)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 2;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 15)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 3;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
				CorVideoOut[i] = 0;
			}           								           													
		}
		CASE (5): //Guest Bedroom - Zone 05
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 12)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 13)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 14)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 2;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 15)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 3;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
				CorVideoOut[i] = 0;
			}           													
		}			
		CASE (6): //WC Main - Zone 08
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 12)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				//CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];					
			}
			else if (InputSource[i] = 13)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 1;
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 14)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 2;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] = 15)
			{
				Pulse(10, ShowSourcePage[13]);
				CurSource[i] = InputSource[i];
				Core3MediaPlayerSource = 3;	
				CorAudioOut[i] = InputSource[i];				
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = InputSource[i];				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorAudioOut[i] = 0;
			}           													
		}
	}
}
		/*CASE (9): //Theater - Zone 09
		{
			if (InputSource[i] >= 1 && InputSource[i] <= 12)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];					
			}
			else if (InputSource[i] >= 16)
			{
				Pulse(10, ShowSourcePage[InputSource[i]]);
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
				CorAudioOut[i] = 0;				
			}
			else if	(InputSource[i] = 0) 
			{
				CurSource[i] = InputSource[i];
				CorVideoOut[i] = InputSource[i];
			}           													
		}			
	}	
}*/

/*PUSH ControlButton
	{
	Pulse(10, ShowSourcePage[CurSource[CurPage]]);	
	}
*/
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

/*Function Main()
{

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

}*/

