/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: CH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "0" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
//#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#USER_SIMPLSHARP_LIBRARY "CrestronKNXLibrary"

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Initialize, Poll_Value, Send_Value;
ANALOG_INPUT Set_Byte_1;
ANALOG_INPUT Set_Byte_2;
ANALOG_INPUT Set_Byte_3;
// BUFFER_INPUT 

DIGITAL_OUTPUT InitializationIsComplete;
ANALOG_OUTPUT Byte_1_Analog;
ANALOG_OUTPUT Byte_2_Analog;
ANALOG_OUTPUT Byte_3_Analog;



/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ipGatewayID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER spAddress[20];



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
KNXThreeByteSimplSharpComponent simplSharpComponent; 

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Initialize
{
   	simplSharpComponent.InitializeSettings(ipGatewayID, getSymbolReferenceName(), spAddress);
}

PUSH Send_Value
{
	simplSharpComponent.SendThreeByteValue(Set_Byte_3,Set_Byte_2,Set_Byte_1);
}

PUSH Poll_Value
{
	simplSharpComponent.PollValue();
}

CHANGE Set_Byte_1
{                                  

}

CHANGE Set_Byte_2
{                                  

}

CHANGE Set_Byte_3
{                                  

} 


/*****************************************************
                CALLBACK FUNCTIONS
******************************************************/

Callback Function UpdateByte1ValueCallback(integer value)
{
	Byte_1_Analog = value;
}

Callback Function UpdateByte2ValueCallback(integer value)
{
	Byte_2_Analog = value;
}

Callback Function UpdateByte3ValueCallback(integer value)
{
	Byte_3_Analog = value;
}
     

Callback Function initializationIsCompleteCallback(integer tempState)
{
	InitializationIsComplete = tempState;	
}



callback function basicInitializationIsCompleteHandler()
{
	RegisterDelegate(simplSharpComponent, initializationIsComplete, initializationIsCompleteCallback);
    RegisterDelegate(simplSharpComponent, UpdateByte1Value, UpdateByte1ValueCallback);	
	RegisterDelegate(simplSharpComponent, UpdateByte2Value, UpdateByte2ValueCallback);
	RegisterDelegate(simplSharpComponent, UpdateByte3Value, UpdateByte3ValueCallback);


    simplSharpComponent.BeginInitialization();
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{                
	WaitForInitializationComplete();
    RegisterDelegate(simplSharpComponent, basicInitializationIsComplete, basicInitializationIsCompleteHandler);
}

