/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Studio-DK
System Name:
System Number:
Programmer:Kabrel
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "KNX Room Light"
#HINT "KNX Room Light"
#DEFINE_CONSTANT LightGroup 15
#CATEGORY "46" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 10 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
#ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Sys_Init, _SKIP_;
DIGITAL_INPUT SwitchOn[LightGroup], _SKIP_;
DIGITAL_INPUT SwitchOff[LightGroup], _SKIP_;
DIGITAL_INPUT SwitchOn_KNX_fb[LightGroup], _SKIP_;
DIGITAL_INPUT SwitchOff_KNX_fb[LightGroup], _SKIP_;

ANALOG_INPUT Level_Set[LightGroup], _SKIP_;
ANALOG_INPUT Level_KNX_fb[LightGroup], _SKIP_;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT SwitchOn_fb[LightGroup], _SKIP_;
DIGITAL_OUTPUT SwitchOn_KNX[LightGroup], _SKIP_;
DIGITAL_OUTPUT SwitchOff_fb[LightGroup], _SKIP_;
DIGITAL_OUTPUT SwitchOff_KNX[LightGroup], _SKIP_;
DIGITAL_OUTPUT Dim_Status[LightGroup], _SKIP_;

//ANALOG_OUTPUT GroupCount, _SKIP_;
ANALOG_OUTPUT Level_fb[LightGroup], _SKIP_;


STRING_OUTPUT GroupName[LightGroup];
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Dimmable[LightGroup];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER GroupName_Str[LightGroup][50];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER DelayValue, Refresh, DelayStatus, a;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Integer_Function Dimmer(INTEGER type)
{
    INTEGER result;

    if (type = 0)
	{
     	result = 0;
	}
	else
	{
     	result = 1;
	}

    Return (result);
}
/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Sys_Init
{
 	INTEGER count;
	for (count = 1 to LightGroup)
	{
     	Dim_Status[count] = Dimmer(Dimmable[count]);
		GroupName[count] = GroupName_Str[count];
		Level_fb[count] = Level_KNX_fb[count];
		//GroupCount = LightGroup;
	}	
}

PUSH SwitchOn
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
   	SwitchOn_fb[i] = 1;
	SwitchOff_fb[i] = 0;
	Pulse (10, SwitchOn_KNX[i]);
}

PUSH SwitchOff
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
	DelayValue = 300;
   	SwitchOn_fb[i] = 0;
	SwitchOff_fb[i] = 1;
	Pulse (10, SwitchOff_KNX[i]);
	Level_fb[i] = 0;
}

PUSH SwitchOn_KNX_fb
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
	
   	SwitchOn_fb[i] = 1;
	SwitchOff_fb[i] = 0;
}

PUSH SwitchOff_KNX_fb
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
	
   	SwitchOn_fb[i] = 0;
	SwitchOff_fb[i] = 1;
}

THREADSAFE CHANGE Level_Set
{
 	INTEGER i;
	i = GetLastModifiedArrayIndex();
	If (Level_Set[i] > 0)
	{
     	SwitchOn_fb[i] = 1;
	 	SwitchOff_fb[i] = 0;		
	}
    Else
	{
        SwitchOn_fb[i] = 0;
		SwitchOff_fb[i] = 1;
	}
	If (Level_Set[i] <> Level_KNX_fb[i])
	{
     	Level_fb[i] = Level_Set[i];
		Delay (100);
    }
}

THREADSAFE CHANGE Level_KNX_fb
{
 	INTEGER i;
	i= GetLastModifiedArrayIndex();
	If (Level_KNX_fb[i] <> Level_Set[i])
	{
		Delay(300);
     	Level_fb[i] = Level_KNX_fb[i];
	
		If (Level_KNX_fb[i] > 0)
		{
     		SwitchOn_fb[i] = 1;
	 		SwitchOff_fb[i] = 0;		
		}
    	Else
		{
        	SwitchOn_fb[i] = 0;
			SwitchOff_fb[i] = 1;
		}
	}
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

