/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: CH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "0" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
//#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#USER_SIMPLSHARP_LIBRARY "CrestronKNXLibrary"
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Initialize, Poll_Value, Turn_On_Control, Turn_Off_Control, Turn_On_Value, Turn_Off_Value;
// ANALOG_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT InitializationIsComplete,Control_Is_On, Control_Is_Off, Value_Is_On, Value_Is_Off;
// ANALOG_OUTPUT 

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ipGatewayID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER spAddress[20];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

KNXTwoBitSimplSharpComponent simplSharpComponent;

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Initialize
{
   	simplSharpComponent.InitializeSettings(ipGatewayID, getSymbolReferenceName(), spAddress);
}

PUSH Poll_Value
{
	simplSharpComponent.PollValue();
}

PUSH Turn_On_Control
{
    simplSharpComponent.SetControl(1);   
}

PUSH Turn_Off_Control
{
    simplSharpComponent.SetControl(0);
}

PUSH Turn_On_Value
{
    simplSharpComponent.SetValue(1);   
}

PUSH Turn_Off_Value
{
    simplSharpComponent.SetValue(0);
}

/*
CHANGE Feedback
{
	State = (hextoi(left(Feedback, 2))>>1)& 0x01;
	Trace("State = %u",State);
	Value = hextoi(left(Feedback, 2)) & 0x01;
	Trace("Value = %u",Value);
	switch(hextoi(left(Feedback, 2)))
	{
		case(0):
		{
		    pulse(10,Control_Is_Off);
			pulse(10,Value_Is_Off);
		}
		case(1):
		{
		    pulse(10,Control_Is_Off);
			pulse(10,Value_Is_On);
		}
		case(2):
		{
		    pulse(10,Control_Is_On);
			pulse(10,Value_Is_Off);
		}
		case(3):
		{
		    pulse(10,Control_Is_On);
			pulse(10,Value_Is_On);
		}
		default:
		{
        	Feedback = "";
		}
	}
}
*/


/*****************************************************
                CALLBACK FUNCTIONS
******************************************************/

Callback Function UpdateControlValueCallback(integer value)
{
	if(value = 0)
	{
		Control_Is_On = off;
		Control_Is_Off = on;
	}
	else
	{
        Control_Is_Off = off;
        Control_Is_On = on;
	}
}

Callback Function UpdateValueCallback(integer value)
{
	if(value = 0)
	{
		Value_Is_On = off;
		Value_Is_Off = on;
	}
	else
	{
        Value_Is_Off = off;
        Value_Is_On = on;
	}
}
     

Callback Function initializationIsCompleteCallback(integer tempState)
{
	InitializationIsComplete = tempState;	
}



callback function basicInitializationIsCompleteHandler()
{
	RegisterDelegate(simplSharpComponent, initializationIsComplete, initializationIsCompleteCallback);
    RegisterDelegate(simplSharpComponent, UpdateControlValue, UpdateControlValueCallback);	
	RegisterDelegate(simplSharpComponent, UpdateValue, UpdateValueCallback);


    simplSharpComponent.BeginInitialization();
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{                
	WaitForInitializationComplete();
    RegisterDelegate(simplSharpComponent, basicInitializationIsComplete, basicInitializationIsCompleteHandler);
}

