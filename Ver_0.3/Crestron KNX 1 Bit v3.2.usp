/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:CH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "0" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#USER_SIMPLSHARP_LIBRARY "CrestronKNXLibrary"
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Initialize, Poll_Value, Set_On, Set_Off;
// ANALOG_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT InitializationIsComplete, On_Feedback, Off_Feedback;
// ANALOG_OUTPUT 

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ipGatewayID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER spAddress[20];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

KNXOneBitSimplSharpComponent simplSharpComponent;

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Initialize
{
   	simplSharpComponent.InitializeSettings(ipGatewayID, getSymbolReferenceName(), spAddress);
}

PUSH Poll_Value
{
	simplSharpComponent.PollValue();
}

PUSH Set_On
{
	simplSharpComponent.ChangeValue(1);	
}


PUSH Set_Off
{
	simplSharpComponent.ChangeValue(0);	
}


/*****************************************************
                CALLBACK FUNCTIONS
******************************************************/

Callback Function UpdateOneBitValueCallback(integer value)
{
	if(value)
	{
     	Off_Feedback = 0; 
		On_Feedback = 1;
	}
	else
	{
        On_Feedback = 0;
		Off_Feedback = 1;
	}
}
     

Callback Function initializationIsCompleteCallback(integer tempState)
{
	InitializationIsComplete = tempState;	
}



callback function basicInitializationIsCompleteHandler()
{
	RegisterDelegate(simplSharpComponent, initializationIsComplete, initializationIsCompleteCallback);
    RegisterDelegate(simplSharpComponent, UpdateOneBitValue, UpdateOneBitValueCallback);	
	


    simplSharpComponent.BeginInitialization();
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{                
	WaitForInitializationComplete();
    RegisterDelegate(simplSharpComponent, basicInitializationIsComplete, basicInitializationIsCompleteHandler);
}


